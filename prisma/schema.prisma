generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Form {
  id              Int               @id @default(autoincrement())
  userId          String
  uid             String            @unique 
  createdAt       DateTime          @default(now())
  published       Boolean           @default(false)
  name            String
  description     String            @default("")
  content         String            @default("[]")
  visits          Int               @default(0)
  submissions     Int               @default(0)
  shareURL        String            @unique @default(uuid())
  domain          String            @default("")
  specialization  String            @default("")
  FormSubmissions FormSubmissions[]
  projectGroup    ProjectGroup?
  status    String    @default("draft")
}

model FormSubmissions {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  formId    Int
  content   String
  userId    String
  form      Form     @relation(fields: [formId], references: [id])
  profile   Profile? @relation(fields: [userId], references: [userId])
}

model Profile {
  id              Int               @id @default(autoincrement())
  userId          String            @unique
  name            String
  imageUrl        String?
  type            String            @default("student")
  title           String?
  bio             String?           @db.Text
  location        String?
  email           String?
  github          String?
  linkedin        String?
  organization    String?
  skills          String[]          @default([])
  achievements    String[]          @default([])
  ongoing_projects Json[]           @default([])
  
  // New mentor-specific fields
  mentorExpertise  String[]         @default([]) // Areas of expertise for mentors
  yearsOfExperience Int?             // Professional experience years
  availableForMentorship Boolean     @default(false)
  mentoredProjects  Json[]           @default([]) // Projects mentored
  mentorRating      Float?           @default(0.0)
  certifications    String[]         @default([])

  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  submissions     FormSubmissions[]
  groupMembers    GroupMember[]     @relation("ProfileToGroupMember")
  assignedTasks   Task[]            @relation("AssignedTo")
  comments        Comment[]

  // Relation for mentored projects/teams
  mentoredGroups   ProjectGroup[]   @relation("MentorToProjectGroups")
}

model ProjectGroup {
  id           Int           @id @default(autoincrement())
  uid          String        @unique
  formId       Int          @unique
  name         String
  description  String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  ownerId      String
  mentor       Profile?     @relation(fields: [mentorId], references: [userId], name: "MentorToProjectGroups")
  mentorId     String?      // Optional field to link to mentor
  members      GroupMember[]
  form         Form         @relation(fields: [formId], references: [id])
  tasks        Task[]
  discussions  Discussion[]
  files        ProjectFile[]
  status       String        @default("active")
}

model GroupMember {
  id        Int          @id @default(autoincrement())
  groupId   Int
  userId    String
  role      String       @default("member")
  joinedAt  DateTime     @default(now())
  status    String       @default("pending")
  group     ProjectGroup @relation(fields: [groupId], references: [id])
  profile   Profile      @relation(fields: [userId], references: [userId], name: "ProfileToGroupMember")
}

model Task {
  id          Int          @id @default(autoincrement())
  title       String
  description String?      @db.Text
  status      String       @default("todo") // todo, in-progress, review, completed
  priority    String       @default("medium") // low, medium, high
  dueDate     DateTime?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groupId     Int
  assignedTo  Profile[]    @relation("AssignedTo")
  group       ProjectGroup @relation(fields: [groupId], references: [id])
  comments    Comment[]
}

model Comment {
  id        Int       @id @default(autoincrement())
  content   String    @db.Text
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  taskId    Int?
  userId    String
  task      Task?     @relation(fields: [taskId], references: [id])
  author    Profile   @relation(fields: [userId], references: [userId])
  discussion Discussion? @relation(fields: [discussionId], references: [id])
  discussionId Int?
}

model Discussion {
  id          Int          @id @default(autoincrement())
  title       String
  content     String       @db.Text
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  groupId     Int
  group       ProjectGroup @relation(fields: [groupId], references: [id])
  comments    Comment[]
}

model ProjectFile {
  id          Int          @id @default(autoincrement())
  name        String
  url         String
  viewUrl     String       @unique @default(uuid()) 
  type        String
  size        Int
  uploadedAt  DateTime     @default(now())
  groupId     Int
  group       ProjectGroup @relation(fields: [groupId], references: [id])
}